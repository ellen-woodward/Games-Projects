using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TicTacToe
{
    class Program
    {
        static char[,] board = new char[3, 3];

        static void Main(string[] args)
        {
            string continuePlaying = "y";

            while (continuePlaying == "y")
            {
                int result = 0;
                char winner = 'x';
                int numberPlays = 0;

                while (result == 0)
                {
                    PlayGame('x');
                    numberPlays++;
                    result = CheckResult();

                    if (result == 1)
                    {
                        GameProgress();
                        winner = 'x';
                        break;
                    }

                    if (numberPlays == 9)
                    {
                        Console.WriteLine("\nStalemate");
                        break;
                    }

                    PlayGame('o');
                    numberPlays++;
                    result = CheckResult();

                    if (result == 1)
                    {
                        GameProgress();
                        winner = 'o';
                        break;
                    }
                }

                if (result == 1)
                    Console.WriteLine($"\nCongratulations, Player {winner} won this match");

                Console.Write("\nWould you like to play again? (y/n) : ");
                continuePlaying = Console.ReadLine().ToLower();
            }

            Console.WriteLine("\nThanks for playing");
            Console.ReadLine();
        }
        static void PlayGame(char player)
        {
            GameProgress();
            Console.Write("\nEnter row no. : ");
            int rowPlayed = int.Parse(Console.ReadLine()) - 1;

            while (rowPlayed > 2 || rowPlayed < 0)
            {
                Console.WriteLine("Row is out of bounds");
                Console.Write("\nEnter row no. : ");
                rowPlayed = int.Parse(Console.ReadLine()) - 1;
            }

            Console.Write("\nEnter column no. : ");
            int columnPlayed = int.Parse(Console.ReadLine()) - 1;

            while (columnPlayed > 2 || rowPlayed < 0)
            {
                Console.WriteLine("Column is out of bounds");
                Console.Write("\nEnter column no.  : ");
                columnPlayed = int.Parse(Console.ReadLine()) - 1;
            }

            FillBoard(rowPlayed, columnPlayed, player);
         
        }

        static void FillBoard(int row, int column, char player)
        {

            if (board[row, column] != 0)
            {
                Console.WriteLine("\nThat position is already taken. Please try again.");
                PlayGame(player);
            }
            else
            {
                board[row, column] = player;
            }
        }

        static void GameProgress()
        {
            Console.WriteLine(" ");

            for (int i = 0; i < board.GetLength(0); i++)
            {
                for (int j = 0; j < board.GetLength(1); j++)
                {
                    Console.Write(" {0}", board[i, j]);

                    if (j < 2)
                    {
                        Console.Write(" | ");
                    }
                }
                if (i < 2)
                {
                    Console.WriteLine("\n-------------");
                }
            }
            Console.WriteLine(" ");
        }

        static int CheckResult()
        {
            int result = 0;

            if (board[0, 0] == 'x' && board[0, 1] == 'x' && board[0, 2] == 'x')
                result = 1;
            else if (board[0, 0] == 'o' && board[0, 1] == 'o' && board[0, 2] == 'o')
                result = 1;
            else if (board[1, 0] == 'x' && board[1, 1] == 'x' && board[1, 2] == 'x')
                result = 1;
            else if (board[1, 0] == 'o' && board[1, 1] == 'o' && board[1, 2] == 'o')
                result = 1;
            else if (board[2, 0] == 'x' && board[2, 1] == 'x' && board[2, 2] == 'x')
                result = 1;
            else if (board[2, 0] == 'o' && board[2, 1] == 'o' && board[2, 2] == 'o')
                result = 1;
            else if (board[0, 0] == 'x' && board[1, 0] == 'x' && board[2, 0] == 'x')
                result = 1;
            else if (board[0, 0] == 'o' && board[1, 0] == 'o' && board[2, 0] == 'o')
                result = 1; 
            else if (board[0, 1] == 'x' && board[1, 1] == 'x' && board[2, 1] == 'x')
                result = 1;
            else if (board[0, 1] == 'o' && board[1, 1] == 'o' && board[2, 1] == 'o')
                result = 1;
            else if (board[0, 2] == 'x' && board[1, 2] == 'x' && board[2, 2] == 'x')
                result = 1;
            else if (board[0, 2] == 'o' && board[1, 2] == 'o' && board[2, 2] == 'o')
                result = 1;
            else if (board[0, 0] == 'x' && board[1, 1] == 'x' && board[2, 2] == 'x')
                result = 1;
            else if (board[0, 0] == 'o' && board[1, 1] == 'o' && board[2, 2] == 'o')
                result = 1;
            else if (board[0, 2] == 'x' && board[1, 1] == 'x' && board[2, 0] == 'x')
                result = 1;
            else if (board[0, 2] == 'o' && board[1, 1] == 'o' && board[2, 0] == 'o')
                result = 1;
            else
                result = 0;

            return result;
        }
    }
}

